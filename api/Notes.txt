Initial Steps to start with back-end development from scratch:

Step 1: Created index.js file
Step 2: Initiate Node.js application by running "npm init -y" in terminal (inside the folder api)
        This will create a package.json file.
        Package.json will have application name, version name, name of main file.
        Here we will install dependencies, libraries and will write scripts.

Step 3: Install Libraries
    Step 3.1: Install Express by running "npm i express" in terminal (inside the folder api)
            Express will be our Node.JS framework, so we can create REST API on our server
    Step 3.2: Install mongoose by running "npm i mongoose" in terminal (inside the folder api)
            In this project we will use MongoDB, mongoose is used to connect MongoDB with Backend(Node.js)
    Step 3.3: Install dotenv by running "npm i dotenv" in terminal (inside the folder api)
            This library will help us to hide our secret keys, crucial values and other important stuff.
            Eg: We will be using stripe payment method, which will provide us secret key for the identification.
                If we will not hide our secret key then anybody can create a payment operation and charge our users.
    Step 3.4: Install nodemon by running "npm i nodemon" in terminal (inside the folder api)
            It allows us to automatically refresh the application after changes, elseafter every change we have to
            go to the terminal and start the application again and again. 
            In crux, it is hot reloading.  

Step 4: Use/Integrate Nodemon
    We run the Backend using "node filename". Ex: "node index.js". This will execute the code inside index.js.
    But we have to run it again and again. Instead we can run it using "nodemon" -> "nodemon index.js"
    Instead of running "nodemon index.js" whenever we start the application,
    we will create the script "start":"nodemon index.js".
    We have used index.js because, we have marked index.js as our main file in package.json (industry standard)
    Now we can directly run our script using "npm start"

Step 5: Create express application

Step 6: Listen to Port No. (This step will complete/finish the setup of Creation of Express Application)

Step 7: Connect Node.js to MongoDB Server (We will accomplish this using "mongoose" library)
        Step 7.1: import "mongoose" library
        Step 7.2: Create/Setup Database, DB User on mongodb.com
        Step 7.3: Setup IP Address under "Network Access" on mongodb.com. There are 2 ways to setup:
                        1. Add the current IP, which means only that IP/server can read the DB.
                        2. Add 0.0.0.0, which means every server/IP can reach our DB
                        Since we will use localhost we shall use 0.0.0.0.
                        If we will deploy, than we should add our server ID
        Step 7.4: Finding connection string in mongodb.com.
                  This connection string will be used inside our code to establish the connection 
                  between mongoDB and Backend.
                        Step 7.4.1: Click "Connect" under "Databases".
                        Step 7.4.2: Then choose option: "Connect your application"
                        Step 7.4.3: Copy the "connection string"
        Step 7.5: Connect Node.js (Express) with DB (MongoDB) 
                        Step 7.5.1: Paste connection string inside "mongoose.connect("connestion string")"
                        Step 7.5.2: Modifying connection string to make the connection
                                Step 7.5.2.1: Replace "<password>" with "Given DB User password" (DB User password was created at Step 7.2)
                                Step 7.5.2.2: Add Database name in the connection string to access
        Step 7.6: Add "then" method to mongoose.connect as .connect is a promise.
Step 8: Hiding Connection String using .env
        Connection String is out secret key. If we share this string on Github or on any public sharing platform,
        everybody can access and modify our DB. .env will be used to prevent this. 

Step 9: Hiding Port No. using .env

Example Substep: Created an example of REST API using endpoints.
        Note:- It is not a good idea to use all the endpoints inside index.js because that will make index.js
               long and messy as there will be lot of different endpoints.
               Therefore we will make a folder routes and we will create our APIs for the respective
               object/collection (Eg: user, products etc.) inside the routes folder using Express's "Router"
               function.
               Then we will reference that APIs endpoints in index.js file using "use" function.

Step 10: API Creation inside. We are going to create REST APIs using endpoints.
        Step 10.1: Create "routes" folder.
        Step 10.2: Create API using "Router()" function and export it.

Step 11: Using API from Step 10 inside index.js with the help of "use" function.
        Step 11.1: Import the API inside index.js
        Step 11.2: Use the imported API inside "index.js" using "use" function

Step 12: Make MongoDB Collections (models)
        Step 12.1: Create new folder "models" 
        Step 12.2: Create empty files of which collections are needed/models are to be defined
        Step 12.3: Define models
                Step 12.3.1: import mongoose
                Step 12.3.2: Create mongoose.Schema()
                Step 12.3.3: export mongoose.model()

                https://mongoosejs.com/docs/models.html
                Note:- Models are fancy constructors compiled from Schema definitions. An instance of a model
                       is called a document. Models are responsible for creating and reading documents from
                       the underlying MongoDB database.
                       When we call mongoose.model() on a schema, Mongoose compiles a model for you.
                       The first argument is the singular name of the collection your model is for. 
                       Mongoose automatically looks for the plural, lowercased version of your model name. 
                       Example:  mongoose.model('User', UserSchema);
                       Thus, for the example, the model "User" is for the "users" collection in the database.
